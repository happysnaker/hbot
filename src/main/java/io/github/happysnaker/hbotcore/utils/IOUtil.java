package io.github.happysnaker.hbotcore.utils;import com.alibaba.fastjson.JSONObject;import io.github.happysnaker.hbotcore.logger.Logger;import java.io.*;import java.net.HttpURLConnection;import java.net.URL;import java.nio.charset.StandardCharsets;import java.util.Locale;import java.util.Map;/** * 文件与网络 IO util，封装了一些常用的 IO 操作 */@SuppressWarnings("unchecked")public class IOUtil {    private static long def_timeout = 3000L;    public static void setDefaultTimeout(long timeout) {        def_timeout = timeout;    }    private static HttpURLConnection getUrlConnection(URL obj, String method, Map<String, String> heads, String postParam, long timeout) throws IOException {        HttpURLConnection conn = (HttpURLConnection) obj.openConnection();        conn.setRequestMethod(method.toUpperCase(Locale.ROOT));        conn.setRequestProperty("Connection", "keep-Alive");        conn.setRequestProperty("Content-Type", "application/json");        conn.setRequestProperty("User-Agent", "Happysnaker-HPRobot-v1.002");        if (heads != null) {            for (Map.Entry<String, String> it : heads.entrySet()) {                conn.setRequestProperty(it.getKey(), it.getValue());            }        }        conn.setInstanceFollowRedirects(true);        if (timeout > 0) {            conn.setConnectTimeout((int) timeout);        }        conn.setDoOutput(true);        conn.setDoInput(true);        conn.connect();        if (postParam != null) {            OutputStream out = conn.getOutputStream();            out.write(postParam.getBytes());            out.flush();        }        return conn;    }    /**     * 发送 http 请求并获取回复信息，并将返回 json 串解析为 Map 返回     *     * @param obj       URL     * @param method 方法，“GET” “PUT”...     * @param heads 头部字段     * @param postParam body 参数，若无可为 null     * @param timeout 超时时间     * @return JSON 返回结果对应的 map 对象     * @throws IOException 任何异常     */    public static Map<String, Object> sendAndGetResponseMap(URL obj, String method, Map<String, String> heads, String postParam, long timeout) throws IOException {        try {            HttpURLConnection conn = getUrlConnection(obj, method, heads, postParam, timeout);            int code = conn.getResponseCode();            String msg = sendAndGetResponseString(obj, method, heads, postParam, timeout);            Map map = JSONObject.parseObject(msg, Map.class);            if (!map.containsKey("code")) {                map.put("code", code);            }            return map;        } catch (Exception e) {            throw e;        }    }    /**     * 发送 http 请求并获取回复信息，并将返回 json 串解析为 Map 返回     *     * @param obj       URL     * @param method 方法，“GET” “PUT”...     * @param heads 头部字段     * @param postParam body 参数，若无可为 null     * @return JSON 返回结果对应的 map 对象     * @throws IOException 任何异常     */    public static Map<String, Object> sendAndGetResponseMap(URL obj, String method, Map<String, String> heads, String postParam) throws IOException {        return sendAndGetResponseMap(obj, method, heads, postParam, def_timeout);    }    /**     * 发送 http 请求并获取回复信息，并将返回 json 串解析为 {@link MapGetter} 返回     *     * @param obj       URL     * @param method 方法，“GET” “PUT”...     * @param heads 头部字段     * @param postParam body 参数，若无可为 null     * @return JSON 返回结果对应的 mapgeeter 对象     * @param timeout 超时时间     * @throws IOException 任何异常     */    public static MapGetter sendAndGetResponseMapGetter(URL obj, String method, Map<String, String> heads, String postParam, long timeout) throws IOException {        return new MapGetter(sendAndGetResponseMap(obj, method, heads, postParam, timeout));    }    /**     * 发送 http 请求并获取回复信息，并将返回 json 串解析为 {@link MapGetter} 返回     *     * @param obj       URL     * @param method 方法，“GET” “PUT”...     * @param heads 头部字段     * @param postParam body 参数，若无可为 null     * @return JSON 返回结果对应的 mapgeeter 对象     * @throws IOException 任何异常     */    public static MapGetter sendAndGetResponseMapGetter(URL obj, String method, Map<String, String> heads, String postParam) throws IOException {        return sendAndGetResponseMapGetter(obj, method, heads, postParam, def_timeout);    }    /**     * 发送 http 请求并获取回复信息，返回原始二进制流     *     * @param obj       URL     * @param method 方法，“GET” “PUT”...     * @param heads 头部字段     * @param postParam body 参数，若无可为 null     * @param timeout 超时时间     * @return stream 返回二进制流     * @throws IOException 任何异常     */    public static InputStream sendAndGetResponseStream(URL obj, String method, Map<String, String> heads, String postParam, long timeout) throws IOException {        try {            HttpURLConnection conn = getUrlConnection(obj, method, heads, postParam, timeout);            return conn.getInputStream();        } catch (Exception e) {            throw e;        }    }    /**     * 发送 http 请求并获取回复信息，返回原始二进制流     *     * @param obj       URL     * @param method 方法，“GET” “PUT”...     * @param heads 头部字段     * @param postParam body 参数，若无可为 null     * @return stream 返回二进制流     * @throws IOException 任何异常     */    public static InputStream sendAndGetResponseStream(URL obj, String method, Map<String, String> heads, String postParam) throws IOException {        return sendAndGetResponseStream(obj, method, heads, postParam, def_timeout);    }    /**     * 发送 http 请求并获取回复信息，解析为字符串返回     *     * @param obj       URL     * @param method 方法，“GET” “PUT”...     * @param heads 头部字段     * @param postParam body 参数，若无可为 null     * @param timeout 超时时间     * @return string 返回字符串     * @throws IOException 任何异常     */    public static String sendAndGetResponseString(URL obj, String method, Map<String, String> heads, String postParam, long timeout) throws IOException {        HttpURLConnection conn = getUrlConnection(obj, method, heads, postParam, timeout);        StringBuilder msg = new StringBuilder();        try (BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream(), StandardCharsets.UTF_8))) {            String line = null;            while ((line = reader.readLine()) != null) {                msg.append(line).append("\n");            }        } finally {            conn.disconnect();        }        Logger.debug("Send request to " + obj + " and get response " + msg);        return msg.toString();    }    /**     * 发送 http 请求并获取回复信息，解析为字符串返回     *     * @param obj       URL     * @param method 方法，“GET” “PUT”...     * @param heads 头部字段     * @param postParam body 参数，若无可为 null     * @return string 返回字符串     * @throws IOException 任何异常     */    public static String sendAndGetResponseString(URL obj, String method, Map<String, String> heads, String postParam) throws IOException {        return sendAndGetResponseString(obj, method, heads, postParam, def_timeout);    }    /**     * 写入 string 内容到文件中，此方法将追加写     *     * @param file 文件     * @param message 追加写的内容     * @throws FileNotFoundException     */    public synchronized static void writeToFile(File file, String message) throws FileNotFoundException {        writeToFile(file, message, true);    }    /**     * 写入 string 内容到文件中     *     * @param file 文件     * @param message 消息     * @param append 是否追加写     * @throws FileNotFoundException     */    public synchronized static void writeToFile(File file, String message, boolean append) throws FileNotFoundException {        try (FileOutputStream out = new FileOutputStream(file, append)) {            out.write(message.getBytes());        } catch (IOException e) {            throw new RuntimeException(e);        }    }    /**     * 写入 字节流 内容到文件中     *     * @param file 文件     * @param in 字节流     * @throws FileNotFoundException     */    public synchronized static void writeToFile(File file, InputStream in) throws FileNotFoundException {        try (FileOutputStream out = new FileOutputStream(file, true)) {            int b;            while ((b = in.read()) != -1) {                out.write(b);            }        } catch (IOException e) {            throw new RuntimeException(e);        }    }    /**     * 读取文件，返回字符串     *     * @param file 文件     * @throws FileNotFoundException     */    public synchronized static String readFile(File file) {        try (FileInputStream in = new FileInputStream(file)) {            BufferedReader reader = new BufferedReader(new InputStreamReader(in));            StringBuilder msg = new StringBuilder();            String line = null;            while ((line = reader.readLine()) != null) {                msg.append(line).append("\n");            }            return msg.toString();        } catch (IOException e) {            throw new RuntimeException(e);        }    }    /**     * 替换文件中的字符串     * @param file 文件     * @param seq 待替换的字符串     * @param target 目标字符串     * @throws FileNotFoundException     */    public synchronized static void replaceFile(File file, String seq, String target) throws FileNotFoundException {        String content = readFile(file);        writeToFile(file, content.replaceAll(seq, target), false);    }}